syntax = "proto3";

option java_multiple_files = true;
option java_package = "gkvs.proto";
option java_outer_classname = "GenericStoreProto";
option objc_class_prefix = "GKV";

package gkvs;

service GenericStore {

    rpc getHead(KeyOperation) returns (HeadResult) {}

    rpc multiGetHead(BatchKeyOperation) returns (stream HeadResult) {}

    rpc get(KeyOperation) returns (RecordResult) {}

    rpc multiGet(BatchKeyOperation) returns (stream RecordResult) {}

    rpc scanHead(ScanOperation) returns (stream HeadResult) {}

    rpc scan(ScanOperation) returns (stream RecordResult) {}

    rpc put(PutOperation) returns (Status) {}

    rpc compareAndPut(PutOperation) returns (Status) {}

    rpc putAll(stream PutOperation) returns (stream Status) {}

    rpc remove(KeyOperation) returns (Status) {}

    rpc removeAll(BatchKeyOperation) returns (Status) {}

}

message Status {

    enum Code {
         SUCCESS = 0;
         SUCCESS_END_STREAM = 1;  // for streaming data, end stream marker
         SUCCESS_UPDATED = 2;     // for compare and put operation that is non-locking algorithm
         SUCCESS_NOT_UPDATED = 3; // for compare and put operation that is non-locking algorithm
         ERROR_INVALID_TABLE = 4; // invalid database, namespace, table, catalog, etc.
         ERROR_BAD_REQUEST = 5;   // invalid parameters in request
         ERROR_POLICY = 6;        // exists record for operation that requires record and vise versa
         ERROR_NETWORK = 7;       // all connection errors and network availability
         ERROR_AUTH = 8;          // security configuration and authentication
         ERROR_FORBIDDEN = 9;     // authorization
         ERROR_TIMEOUT = 10;      // all SLA errors
         ERROR_OVERLOAD = 11;     // all errors related to high load of operations, full queues and etc.
         ERROR_OVERFLOW = 12;     // all errors related to data space
         ERROR_LOCKED = 13;       // all tries to update data that was in pessimistic lock
         ERROR_ABORTED = 14;      // client aborted stream operation
         ERROR_UNSUPPORTED = 15;  // unsupported commands
         ERROR_DRIVER = 16;       // data access driver specific errors
         ERROR_IO = 17;           // file, serialization, network i/o errors
         ERROR_SYSTEM = 18;       // all unknown errors
    }

    Code code = 1;
    int32 errorCode = 3;
    string errorMessage = 4;

}


message Head {

    int64 version = 1;
    repeated string columnKey = 2;

}

message HeadResult {

    Status status = 1;
    Head head = 2;
}

message Record {

    int64 version = 1;
    map<string, bytes> columns = 2;

}

message RecordResult {

    Status status  = 1;
    Record record = 2;
}


message Key {

    string tableName = 1;

    oneof recordRef {
      string  recordKey = 2;
      bytes   recordHash = 3;
    }

    // optional, if not specified then all columns will be retrieved
    repeated string columnKey = 4;

}

message KeyResult {

   Status status  = 1;
   Key key = 2;

}

message Operation {

   int32 timeoutMls = 1;
   fixed64 pit = 2;

}

message ScanOperation {

   Operation op = 1;

}

message KeyOperation {

   Operation op = 1;
   Key key = 2;

}

message PutOperation {

   Operation op = 1;
   Record record = 2;
   int32 ttlSec = 3;
}

message BatchKeyOperation {

   KeyOperation ops = 1;

}
