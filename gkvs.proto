syntax = "proto3";

option java_multiple_files = true;
option java_package = "rocks.gkvs.protos";
option java_outer_classname = "GenericStoreProtos";
option objc_class_prefix = "GKVS";

package gkvs;

service GenericStore {

    rpc get(KeyOperation) returns (ValueResult) {}

    rpc multiGet(BatchKeyOperation) returns (BatchValueResult) {}

    rpc getAll(stream KeyOperation) returns (stream ValueResult) {}

    rpc scan(ScanOperation) returns (stream ValueResult) {}

    rpc put(PutOperation) returns (StatusResult) {}

    rpc putAll(stream PutOperation) returns (stream StatusResult) {}

    rpc remove(KeyOperation) returns (StatusResult) {}

    rpc removeAll(stream KeyOperation) returns (stream StatusResult) {}

}

enum StatusCode {

     SUCCESS = 0;
     SUCCESS_NOT_UPDATED = 1;  // for compare and put operation that is non-locking algorithm
     SUCCESS_END_STREAM = 2;   // in case of end stream, not payload in return

     ERROR_RES_NOT_FOUND = 10; // not found: database, namespace, table, catalog, etc.
     ERROR_BAD_REQUEST = 11;   // invalid parameters in request
     ERROR_POLICY = 12;        // exists record for operation that requires record and vise versa
     ERROR_MIGRATION = 13;     // data or connections migration occur during operation
     ERROR_NETWORK = 14;       // all connection errors and network availability
     ERROR_AUTH = 15;          // security configuration and authentication
     ERROR_FORBIDDEN = 16;     // authorization
     ERROR_TIMEOUT = 17;       // all SLA errors
     ERROR_OVERLOAD = 18;      // all errors related to high load of operations, full queues and etc.
     ERROR_OVERFLOW = 19;      // all errors related to data space
     ERROR_LOCKED = 20;        // all tries to update data that was in pessimistic lock
     ERROR_ABORTED = 21;       // client aborted stream operation
     ERROR_UNSUPPORTED = 22;   // unsupported commands
     ERROR_DRIVER = 23;        // data access driver specific errors
     ERROR_IO = 24;            // file, serialization, network i/o errors
     ERROR_INTERNAL = 25;      // all unknown errors

}

message Status {

    StatusCode code = 1;

    int32 errorCode = 10;
    string errorMessage = 11;
    string errorDetails = 12;   // place for stackTrace for Java

}

message StatusResult {

    Status status = 1;
    int64 sequenceNum = 2;
}

message Metadata {

    int64 version = 1;    // generation of the record
    int32 ttl = 2;        // time to live in seconds
}

message Value {

    string column = 1;

    oneof value {
      bytes  raw = 2;
      bytes  digest = 3;  // used only in output to check integrity of data
    }

    int64 timestamp = 5;  // timestamp of the value

}

message ValueResult {

    Status status  = 1;
    int64 sequenceNum = 2;
    Metadata metadata = 3;
    Key key = 4;
    repeated Value value = 5;

}

message BatchValueResult {

    repeated ValueResult result = 1;

}

message Key {

    string tableName = 1;

    oneof recordKey {
      bytes  raw = 2;
      bytes  digest = 3;
    }

}

message RequestOptions {

   int32 timeout = 1;   // timeout in milliseconds for SLA
   int64 pit = 2;       // request point in time in milliseconds, for put operation used as a default timestamp of values

}

enum OutputOptions {

    // exclude key
    VALUE_RAW = 0;
    METADATA_ONLY = 1;
    VALUE_DIGEST = 2;
    VALUE_MAP = 3;

    // include key
    KEY_VALUE_RAW = 10;
    KEY = 11;
    KEY_VALUE_DIGEST = 12;
    KEY_VALUE_MAP = 13;

}

message Select {

    // select specific columns
    repeated string column = 1;

}

message Bucket {

    int32 bucketNum = 1;
    int32 totalNum = 2;

}

message ScanOperation {

   RequestOptions options = 1;
   string tableName = 2;

   oneof query {
      Select select = 3;
      Bucket bucket = 4;
   }

   OutputOptions output = 10;

}

message KeyOperation {

   RequestOptions options = 1;
   int64 sequenceNum = 2;
   Key key = 3;
   Select select = 4;

   OutputOptions output = 10;

}

message BatchKeyOperation {

   // gets max timeout for the batch
   repeated KeyOperation operation = 1;

}

message PutOperation {

   RequestOptions options = 1;
   int64 sequenceNum = 2;
   Key key = 3;
   repeated Value value = 4;
   int32 ttl = 5;   // time to live in seconds

   bool compareAndPut = 6;
   int64 version = 7;

}
