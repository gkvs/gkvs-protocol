syntax = "proto3";

option java_multiple_files = true;
option java_package = "gkvs.proto";
option java_outer_classname = "GenericKeyValueProto";
option objc_class_prefix = "GKV";

package gkvs;

service GenericKeyValueService {

    // executes a single operation

    rpc execute(Operation) returns (Result) {}
    
    // executes a batch of opeations in one request
    
    rpc execute(BatchOperation) returns (BatchResult) {}
    
    // stores large values
    
    rpc streamIn(stream FragmentedOperation) returns (FragmentedResult) {}

    // retrieves large values

    rpc streamOut(FragmentedOperation) returns (stream FragmentedResult) {}

    // run async
    
    rpc run(stream Operation) returns (stream Result) {}
}

message BatchOperation {
    repeated Operation list = 1;
}

message BatchResult {
    repeated Result list = 1;
}

message Operation
{
    enum Type
    {
        // record operations  
        GET_RECORD = 1;
        EXIST_RECORD = 2;
        PUT_RECORD = 3;
        REMOVE_RECORD = 4;
        CAS_RECORD = 5;
       
        // cell operations
        GET_CELL = 11;
        EXIST_CELL = 12;
        PUT_CELL = 13;
        REMOVE_CELL = 14;
        CAS_CELL = 15;
    }

    // optional field for operation id, used in run method
    one_of {
       int64  lid = 1;   // long id of operation
       string sid = 2;   // string id of operation
    }

    // required type of the operation
    Type type = 3;
    
    // required field
    string tableName = 4;
    
    // required field
    string recordKey = 5; 
    
    // optional field for CELL operations
    string columnKey = 6;   
    
    // optional point in time field in milliseconds, used for history storages
    fixed64 pitMillis = 7;  
    
    // TTL for Put and CAS operations
    int32 ttlSeconds = 8;
    
    // version for CompareAndSet
    one_of {
      int64 lver = 9;   // some data stores support version, some not
      string sver = 10;
    }
    
    // new values for Put and CAS operations
    one_of {
    
       // RECORD operations use this:
       map<string, bytes> newKeyValues = 11;
       
       // CELL operations use this:
       bytes  newValue = 12;
    }
    
}

message Result {

    enum Status
    {
        SUCCESS = 1;
        ERROR = 2;
    }

    enum ValueType
    {
        NO_VALUE = 1;
        BOOL_VALUE = 2;
        RECORD_VALUE = 3;
        CELL_VALUE = 4;
    }
    
    // optional field for operation id, used in run method
    one_of {
       int64  lid = 1;   // long id of operation
       string sid = 2;   // string id of operation
    }

    Status status  = 3;
    
    one_of {
       ValueType valueType = 4;
       ErrorPayload errorPayload = 10;
    }
    
    one_of {
       bool boolValue = 12;
       RecordValue recordValue = 13;
       CellValue cellValue = 14;
    }
}

message ErrorPayload {
    int32 errorCode = 1;
    string errorMessage = 2;
    string className = 3;
    string stackTrace = 4;
}

message CellValue {
    one_of {
      int64 lver = 1;   // some data stores support version, some not, it could be a record version
      string sver = 2;
    }
    bytes value = 3;
}

message RecordValue {
    one_of {
      int64 lver = 1;   // some data stores support version, some not
      string sver = 2;
    }
    map<string, bytes> keyValues = 3;
}

message FragmentedOperation
{
    enum Type
    {
        // record operations  
        GET = 1;
        PUT = 2;
        REMOVE = 3;
    }

    // required type of the operation
    Type type = 3;
    
    // required field
    string tableName = 4;
    
    // required field
    string recordKey = 5; 

    // TTL for Put operation
    int32 ttlSeconds = 6;
    
    // fragment number, used in PUT operation
    int32 fragmentNum = 7;   
    
    // part of the value, used in PUT operation
    bytes fragmentValue = 8;
    
}


message FragmentedResult {

    enum Status
    {
        SUCCESS = 1;
        ERROR = 2;
    }

    enum ValueType
    {
        NO_VALUE = 1;
        FRAGMENT_VALUE = 3;
    }

    Status status  = 3;
    
    one_of {
       ValueType valueType = 4;
       ErrorPayload errorPayload = 10;
    }

    int32 fragmentNum = 5;
    bytes fragmentValue = 13;
    
}
